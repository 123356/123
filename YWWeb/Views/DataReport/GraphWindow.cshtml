@{
    ViewBag.Title = "曲线报表";
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>GraphData</title>
    @Html.Partial("~/Views/Home/BaseHTML.cshtml")
    <script src="~/Content/js/echarts.min3.js" type="text/javascript"></script>
</head>
<body>
        <div id="canvas" style ="height: 100%; width:100%;">
            <div id="HisGraphCharts" style = 'color: White;text-align: center; font-size: 20px;'><br><br><br><br>数据加载中...</div>
        </div>
    <script type="text/javascript">
        var TagID = @Html.Raw(Request.QueryString["TagID"]);
        var firstOpen = 0, canAdd = 0;
        var pid, did;
        var datestart, dateend;
        var graphtype = 6, getPoinType = 0, IsZoom = 0;
        //定义历史曲线变量值
        var ajaxbg = top.$("#loading_background,#loading");
        var Json = "", xAxisFormat = [], yAxisFormat = [], LegendData = [], SeriesData = [], Colors = [];
        GetGraphData();
        function GetGraphData() {
            //请求前先清空
            Json = [], xAxisFormat = [], yAxisFormat = [], LegendData = [], SeriesData = [], Histagid = "";
            $.post("/Graphs/GetGraphs2", { "pid": $.cookie('cookiepid'), "Graphtype":6, "PoinType": 0, "TagIDs": TagID, "startdatetime": datestart, "enddatetime": dateend }, function (data) {
                var dataJson = eval("(" + data + ")");
                Json = dataJson;
                if (dataJson.xLength < 1) {
                    ajaxbg.hide();
                    $('#canvas').html("<div id='HisGraphCharts' style = 'color: White;text-align: center; font-size: 20px;'><br><br><br><br>没有近24小时的数据！</div>");
                    return false;
                }
                else {
                    $('#canvas').html("<div id='HisGraphCharts' style='height: 97%; width:98%; z-index: 10; padding: 5px; background-color: #333 !important;'>");
                    SetGraphOption();
                }
            });

        }
        function SetGraphOption() {
            var Xarr = Json.xAxis.split(',');

            for (i = 0; i < Xarr.length; i++) {
                var ym = Xarr[i].split(' ')[0].split('/');
                var hm = Xarr[i].split(' ')[1].split(':');
                if (hm[0].length == 1 && graphtype == 6)
                    xAxisFormat.push('0' + hm[0] + ':' + hm[1]);
                else if (hm[0].length == 1 && graphtype != 6)
                    xAxisFormat.push(ym[1] + '-' + ym[2] + ' 0' + hm[0] + ':' + hm[1]);
                else if (hm[0].length != 1 && graphtype == 6)
                    xAxisFormat.push(hm[0] + ':' + hm[1]);
                else
                    xAxisFormat.push(ym[1] + '-' + ym[2] + ' ' + hm[0] + ':' + hm[1]);
            }
            var exDataTypeID = 0, index = 0, yMax = Json.Max[0], yMin = Json.Min[0], aValue = 0, yMax1 = Json.Max[1], yMin1 = Json.Min[1], aValue1 = 0;
            if (Json.AlarmValue.length > 1) {
                aValue = Json.AlarmValue[0];
                aValue1 = Json.AlarmValue[1];
            }
            else
                aValue = Json.AlarmValue[0];

            if ($("#AlarmLine").attr("checked") == 'checked' && aValue > yMax && aValue < 1000) {
                yMax = aValue;
            }
            if ($("#AlarmLine").attr("checked") == 'checked' && aValue < yMin && aValue > -1000) {
                yMin = aValue;
            }
            if ($("#AlarmLine").attr("checked") == 'checked' && aValue1 > yMax1 && aValue1 < 1000) {
                yMax1 = aValue1;
            }
            if ($("#AlarmLine").attr("checked") == 'checked' && aValue1 < yMin1 && aValue1 > -1000) {
                yMin1 = aValue1;
            }

            for (j = 0; j < Json.Count; j++) {
                if (Json.Graph[j].DataTypeID != exDataTypeID && index == 0) {
                    yAxisFormat.push({
                        name: Json.Graph[j].Position + '(' + Json.Graph[j].单位 + ')',
                        type: 'value',
                        index: 0,
                        axisLabel: {
                            formatter: function (v) { return parseInt(v) },
                            textStyle: { color: '#fff' }
                        },
                        splitLine: { show: true, lineStyle: { color: 'rgb(255,255,255)', type: 'dashed'} },
                        axisLine: { lineStyle: { color: '#fff', type: 'solid', width: 5} },
                        max: yMax * 1.1,
                        min: yMin * 0.9
                    });
                    exDataTypeID = Json.Graph[j].DataTypeID;
                    index++;
                }
                else if (Json.Graph[j].DataTypeID != exDataTypeID && Json.Graph[j].DataTypeID != 24 && index != 0) {
                    yAxisFormat.push({
                        name: Json.Graph[j].Position + '(' + Json.Graph[j].单位 + ')',
                        type: 'value',
                        index: 1,
                        axisLabel: {
                            formatter: function (v) { return parseInt(v) },
                            textStyle: { color: '#fff' }
                        },
                        splitLine: { show: true, lineStyle: { color: 'rgb(255,255,255)', type: 'dashed'} },
                        axisLine: { lineStyle: { color: '#fff', type: 'solid', width: 5} },
                        max: yMax1 * 1.2,
                        min: yMin1 * 0.8
                    });
                    exDataTypeID = Json.Graph[j].DataTypeID;
                    index++;
                }

                SeriesData.push({
                    name: Json.Graph[j].Remarks,
                    type: 'line',
                    smooth: true,
                    yAxisIndex: index - 1,
                    symbolSize: 2,
                    data: eval("[" + Json.Graph[j].置1说明 + "]"),
                    markPoint: {
                        data: [{ type: 'max', name: '最大值' },
                                 { type: 'min', name: '最小值'}]
                    }
                });
                LegendData.push(Json.Graph[j].Remarks);
            }
            //曲线着色
            Colors = ["#cd5c5c", "#ffa500", "#40e0d0", "#ee90ff", "#ff6347", "#7b68ee", "#7b68ee", "#ffd700", "#6699FF", "#ff6666", "#3cb371", "#b8860b", "#30e0e0"]
            Colors[Json.Count] = "rgb(255,0,0)";
            ajaxbg.hide();
            BuildGraphVeiw();
        }
        function BuildGraphVeiw() {
            var currSeriesData = "";
            currSeriesData = SeriesData;
            //报警线
            if ($("#AlarmLine").attr("checked") == 'checked') {
                for (b = 0; b < Json.AlarmValue.length; b++) {
                    var AlarmLine = [];
                    for (a = 0; a < Json.xLength; a++)
                        AlarmLine.push(Json.AlarmValue[b]);
                    currSeriesData.push({
                        name: Json.DataType[b] + "报警值",
                        type: "line",
                        yAxisIndex: 0,
                        lineStyle: { normal: { color: 'rgb(255, 0, 0)'} },
                        data: AlarmLine,
                        symbol: "emptyCircle",
                        smooth: true
                    });
                }
            }
            var myHisChart = echarts.init(document.getElementById('HisGraphCharts'), 'macarons');
            var option = {
                title: {
                    text: '历史趋势图',
                    textStyle: { color: '#fff' }
                },
                toolbox: {
                    feature: {
                        dataZoom: {
                            yAxisIndex: 'none',
                            title: { back: '' },
                            icon: { back: 'image://' }
                        },
                        restore: {}
                    },
                    iconStyle: { normal: { textPosition: 'top', borderColor: '#66ccff' }, emphasis: { textPosition: 'top', borderColor: '#ff33ee'} },
                    top: '0%',
                    right: '0%',
                    itemSize: '21'
                },
                tooltip: {
                    trigger: 'axis'
                },
                legend: {
                    data: LegendData,
                    textStyle: { color: '#fff' }
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true
                },
                xAxis: [
                {
                    type: 'category',
                    boundaryGap: false,
                    axisLabel: { textStyle: { color: '#fff'} },
                    splitLine: { show: true, lineStyle: { color: 'rgb(255,255,255)', type: 'dashed'} },
                    axisLine: { lineStyle: { color: '#fff', type: 'solid', width: 5} },
                    data: xAxisFormat
                }],
                yAxis: yAxisFormat,
                color: Colors,
                series: currSeriesData
            };
            // 为echarts对象加载数据 
            myHisChart.setOption(option);
            myHisChart.on('datazoom', CheckZoom);
            function CheckZoom(param) {
                var s = param.batch[0].startValue;
                var e = param.batch[0].endValue;
                var axis = Json.xAxis.split(',');
                var graphtype = $("input[name='GraphType']:checked").val();
                startdate = axis[s].split(' ')[0].split('/');
                enddate = axis[e].split(' ')[0].split('/');
                datestart = startdate[0] + '-' + startdate[1] + '-' + startdate[2];
                dateend = enddate[0] + '-' + enddate[1] + '-' + enddate[2];

                var aDate, oDate1, oDate2, iDays
                aDate = datestart.split("-");
                oDate1 = new Date(datestart);     //转换为12-18-2002格式
                aDate = dateend.split("-");
                oDate2 = new Date(dateend);
                iDays = parseInt(Math.abs(oDate2 - oDate1) / 1000 / 60 / 60 / 24)    //把相差的毫秒数转换为天数

                if (iDays < 8 && IsZoom == 0 && (graphtype == 144 || graphtype == 707)) {
                    $('#GraphTypezdy').attr('checked', 'checked');
                    getPoinType = 0;

                    unlock();
                    $('#time').removeClass('curve_switchactive');
                    $('#one').addClass('curve_switchactive');
                    $('#EndDate').datebox('setValue', dateend);
                    $('#StartDate').datebox('setValue', datestart);
                    GetGraphData()
                    IsZoom = 1;
                    getPoinType = 1;
                }
            }
        }

    </script>
    <script type="text/javascript" src="~/Content/UserJS/ResizeList._jm.js"></script>
</body>
</html>
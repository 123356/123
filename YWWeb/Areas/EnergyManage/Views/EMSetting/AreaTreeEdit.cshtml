@{ Layout = null; }


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>能源树编辑</title>

    <link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css">

    <style>
        html,
        body,
        #app {
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden;
        }

            #app > section {
                height: 100%;
            }

        .el-header,
        .el-footer {
            color: #333;
            text-align: center;
            line-height: 60px;
            text-align: left;
        }

        .el-header {
            border-bottom: 1px solid #ddd;
        }

        .el-aside {
            border-left: 1px solid #ddd;
        }

        form .el-card__body {
            padding: 5px;
        }

        .el-main {
            display: flex;
            flex-direction: column;
        }

            .el-main > * {
                flex-grow: 1
            }

        .el-tabs.el-tabs--card.el-tabs--top,
        .el-tabs__content {
            display: flex;
            flex-direction: column;
            width: 100%;
        }

        .el-tree-node__content:hover {
            color: #fff;
            background: #999;
        }

        .el-tree-node:focus > .el-tree-node__content {
            background-color: #333;
            color: #fff;
        }

        .el-tree--highlight-current .el-tree-node.is-current > .el-tree-node__content {
            background-color: #333;
            color: #fff;
        }

        .el-dialog .el-dialog__body {
            padding-top: 5px;
        }

        .el-tabs__content {
            height: 100%;
            overflow: auto;
        }

        .custom-tree-node {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: space-between;
            font-size: 14px;
            padding-right: 8px;
            font-size: 20px;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    @*
        <script type="text/javascript" src="~/Content/js/vue.min.js"></script>*@
    <script src="https://unpkg.com/element-ui/lib/index.js"></script>
    <script type="text/javascript" src="~/Content/js/vue-resource.min.js"></script>


</head>

<body>
    <div id="app" onselectstart="return false" style="-moz-user-select:none;">
        <el-container>
            <el-header>
                <el-select placeholder="选择单位" v-model="UnitIndex" v-on:change="info">
                    <el-option :label="itme.UnitName" :value="index" :key="index" v-for="(itme,index) in UnitList"></el-option>
                </el-select>
            </el-header>
            <el-container>
                <el-main>
                    <el-tabs type="card" v-model="treeType" v-on:tab-click="GetEnergyTree">
                        <el-tab-pane label="分项用电" name="1"></el-tab-pane>
                        <el-tab-pane label="组织区域" name="2"> </el-tab-pane>
                        <el-tree :data="tree.energy"
                                 :props="Props"
                                 :default-expand-all="true"
                                 :expand-on-click-node="false"
                                 :draggable="true"
                                 node-key="ID"
                                 v-on:node-click="TreeNodeClick"
                                 :highlight-current="true"
                                 ref="energy"
                                 :check-on-click-node="true">
                            <span class="custom-tree-node" slot-scope="{ node, data }">
                                <span>{{data.name}}</span>
                                <span>
                                    <el-button type="text"
                                               size="medium "
                                               icon="el-icon-circle-plus-outline"
                                               v-on:click="() => append(data)">
                                    </el-button>
                                    <el-button type="text"
                                               size="medium "
                                               icon="el-icon-delete"
                                               v-on:click="() => remove(node, data)">
                                    </el-button>
                                </span>
                            </span>
                        </el-tree>
                    </el-tabs>
                </el-main>
                <el-aside style="background:#fff;width:50%;padding:10px">
                    <el-card class="box-card">
                        <div slot="header" class="clearfix">
                            <span>{{UnitData?UnitData.UnitName:""}}</span>
                        </div>
                        <el-row :gutter="20">
                            <el-col :span="6">
                                <el-badge :value="CidList.length" class="item" type="primary">
                                    <el-button size="small" v-on:click="showTab">总用表</el-button>
                                </el-badge>
                            </el-col>
                            <el-col :span="6">
                                <el-badge :value="CidBinded.length"
                                          class="item"
                                          :type="CidBindMany.length?'danger':'primary'">
                                    <el-button size="small" v-on:click="showTab">已绑定</el-button>
                                </el-badge>
                            </el-col>
                            <el-col :span="6">
                                <el-badge :value="UnBind.length"
                                          class="item"
                                          :type="UnBind.length?'warning':'primary'">
                                    <el-button size="small" v-on:click="showTab">未绑定</el-button>
                                </el-badge>
                            </el-col>
                            <el-col :span="6">
                                <el-badge :value="CidBindMany.length"
                                          class="item"
                                          :type="CidBindMany.length?'danger ':'primary'">
                                    <el-button size="small" v-on:click="showTab">重复绑定 </el-button>
                                </el-badge>
                            </el-col>
                        </el-row>
                    </el-card>


                    <el-card class="box-card" :style="{'margin-top':'20px'}">
                        <div slot="header" class="clearfix">
                            <span>节点</span>
                        </div>
                        <el-form ref="ruleForm" label-width="100px" class="demo-ruleForm" label-position="left">
                            <el-row :gutter="20">
                                <el-col :span="12">
                                    <el-form-item label="名称">
                                        <el-input v-model="node.name"></el-input>
                                    </el-form-item>
                                </el-col>
                                <el-col :span="12">
                                    <el-form-item label="负责人">
                                        <el-input v-model="node.unit_head"></el-input>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-row :gutter="20">
                                <el-col :span="12">
                                    <el-form-item label="面积">
                                        <el-input v-model="node.unit_area"></el-input>
                                    </el-form-item>
                                </el-col>
                                <el-col :span="12">
                                    <el-form-item label="人数">
                                        <el-input v-model="node.unit_people"></el-input>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-row :gutter="20">
                                <el-col :span="24">
                                    <el-form-item label="累加电表">
                                        <el-button type="primary" icon="el-icon-plus" circle size="mini" :style="{'margin-left':'10px'}" title="添加" v-on:click="ClickAddCidTagBtn(1)"></el-button>

                                        <el-badge :value="AddCidTags.length" class="item" title="总数" :style="{'margin':'0 10px'}">
                                            <el-button type="warning" icon="el-icon-star-off" circle size="mini"></el-button>
                                        </el-badge>

                                        <el-button type="warning" icon="el-icon-edit" circle size="mini" title="继承子项" v-on:click="InheritCid(1)"></el-button>
                                        <el-button type="warning" icon="el-icon-refresh" circle size="mini" title="还原" v-on:click="RevertToCid(1)"></el-button>
                                        <el-button type="danger" icon="el-icon-delete" circle size="mini" title="全部删除" v-on:click="addCidOld=[]"></el-button>
                                        <el-card shadow="hover" :style="{'max-height':'200px','overflow':'auto','min-height':'60px'}">
                                            <el-tag size="small" :style="{'margin':'5px '}" v-for="itme in AddCidTags" :title="`pid: ${itme.PID}\ndid: ${itme.DID}`" closable :key="itme.PID+'-'+itme.CID" :disable-transitions="true" v-on:close="TagHandleClose(itme.PID,itme.CID,1)">{{itme.CName}}</el-tag>
                                        </el-card>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-row :gutter="20">
                                <el-col :span="24">
                                    <el-form-item label="累减电表">
                                        <el-button type="primary" icon="el-icon-plus" circle size="mini" :style="{'margin-left':'10px'}" title="添加" v-on:click="ClickAddCidTagBtn(-1)"></el-button>
                                        <el-badge :value="DelCidTage.length" class="item" :style="{'margin':'0 10px'}" title="总数">
                                            <el-button type="warning" icon="el-icon-star-off" circle size="mini"></el-button>
                                        </el-badge>
                                        <el-button type="primary" icon="el-icon-edit" circle size="mini" title="继承子项" v-on:click="InheritCid(-1)"></el-button>
                                        <el-button type="warning" icon="el-icon-refresh" circle size="mini" title="还原" v-on:click="RevertToCid(-1)"></el-button>
                                        <el-button type="danger" icon="el-icon-delete" circle size="mini" title="全部删除" v-on:click="delCidOld=[]"></el-button>
                                        <el-card shadow="hover" :style="{'max-height':'200px','overflow':'auto','min-height':'60px'}">
                                            <el-tag size="small" :style="{'margin':'5px '}" v-for="itme in DelCidTage" :title="`pid: ${itme.PID}\ndid: ${itme.DID}`" closable :key="itme.PID+'-'+itme.CID" :disable-transitions="true" v-on:close="TagHandleClose(itme.PID,itme.CID,-1)">{{itme.CName}}</el-tag>
                                        </el-card>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-form-item>
                                <el-button type="primary" v-on:click="submissions">提交</el-button>
                            </el-form-item>
                        </el-form>
                    </el-card>
                </el-aside>
            </el-container>
        </el-container>



        @*表格模态框*@
        <el-dialog title="详情" :visible.sync="Dialogtab" :before-close="closeTab">
            <el-table :data="griData" stripe height="450" border>
                <el-table-column property="nodeID" label="ID"></el-table-column>
                <el-table-column property="nodeName" label="节点名称"></el-table-column>
                <el-table-column property="binded" label="已经绑定" width="350"></el-table-column>
                <el-table-column property="bindedNum" label="已经绑定个数"></el-table-column>
                <el-table-column property="bindss" label="重复绑定"></el-table-column>
            </el-table>
        </el-dialog>




        <el-dialog :title="node.name"
                   :visible="DialogCid"
                   width="40%"
                   :close-on-click-modal="false"
                   :show-close="false"
                   v-on:opened="openedDialog"
                   v-on:closed="closedDialog"
                   :close-on-press-escape="false">
            <el-input placeholder="输入关键字进行过滤"
                      v-model="filterText"
                      :clearable="true"
                      :style="{'margin-bottom':'10px'}">
                <i slot="prefix" class="el-input__icon el-icon-search"></i>
            </el-input>
            <el-tree class="filter-tree"
                     :data="tree.cid"
                     :props="Props"
                     :default-expanded-keys="['0']"
                     :render-after-expand="true"
                     :show-checkbox="true"
                     :check-on-click-node="true"
                     :expand-on-click-node="false"
                     :filter-node-method="filterCidNode"
                     node-key="id"
                     ref="cidtree"
                     :style="{'height':'40vh','overflow':'auto','background':'#F0F6E4','margin-top':'10px'}">
            </el-tree>
            <span slot="footer" class="dialog-footer">
                <el-button type="primary" v-on:click="ModalBoxClickOk">确 定</el-button>
                <el-button v-on:click="DialogCid = false">取 消</el-button>
            </span>
        </el-dialog>


    </div>

    <script>
        let vm = new Vue({
            el: "#app",
            data: {
                //列表数据
                griData: [ ],
                //单位
                UnitList: [],
                UnitIndex: 0,
                //cid列表
                CidList: [],
                //树
                tree: {
                    cid: [],
                    energy: []
                },
                Props: {
                    children: 'Children',
                    label: 'name'
                },
                treeType: "1",
                node: {
                    Children: null,
                    ID: null,
                    NeedPower: null,
                    Remarks: null,
                    UsePower: null,
                    addCid: null,
                    child_id: null,
                    delCid: null,
                    item_type: null,
                    name: null,
                    parent_id: null,
                    unit_area: null,
                    unit_head: null,
                    unit_id: null,
                    unit_note: null,
                    unit_people: null,
                },
                //电表属性缓存
                addCidOld: "",
                delCidOld: "",
                DialogCid: false,
                Dialogtab: false,

                filterText: "",


            },
            computed: {

                //叶节点
                leavesNode: function () {
                    let list = [];
                    this.traverseTree(list, this.tree.energy);
                    return list
                },
                //绑定的所有电表
                CidBinded: function () {
                    if (this.leavesNode.length == 0) {
                        return [];
                    }
                    let arr = "";
                    for (let a = 0; a < this.leavesNode.length; a++) {
                        if (this.leavesNode[a].addCid) {
                            arr += this.leavesNode[a].addCid + ',';
                        }
                    }
                    arr = arr.substr(0, arr.length - 1);
                    arr = arr.split(',');
                    return arr;
                },
                //没有绑定
                UnBind: function () {
                    this.CidList;
                    let all = "," + this.CidBinded + ",";
                    let list = [];
                    for (let a = 0; a < this.CidList.length; a++) {
                        if (all.indexOf(`,${this.CidList[a].PID}-${this.CidList[a].CID},`) < 0) {
                            list.push(this.CidList[a]);
                        }
                    }
                    return list;
                },
                //添加电表显示
                AddCidTags: function () {
                    if (this.addCidOld=="" || !this.CidList) {
                        return []
                    }
                    let list = [];
                    let str = "," + this.addCidOld + ",";
                    for (let a = 0; a < this.CidList.length; a++) {
                        if (str.indexOf(`,${this.CidList[a].PID}-${this.CidList[a].CID},`) >= 0) {
                            list.push(this.CidList[a]);
                        }
                    }
                    return list
                },
                //重复复绑定
                CidBindMany: function () {
                    var ary = this.CidBinded.sort(); //数组排序
                    var cffwxmsAry = new Array();
                    for (var i = 0; i < ary.length; i++) {
                        if (ary[i] == ary[i + 1]) {
                            cffwxmsAry.push(ary[i]);
                        }
                    }
                    var result = [],
                        isRepeated;
                    for (var k = 0; k < cffwxmsAry.length; k++) {
                        isRepeated = false;
                        for (var j = 0; j < result.length; j++) {
                            if (cffwxmsAry[k] == result[j]) {
                                isRepeated = true; break;
                            }
                        }
                        if (!isRepeated) {
                            result.push(cffwxmsAry[k]);
                        }
                    }
                    return result;
                },
                //删除电表显示
                DelCidTage: {
                    set: function () { },
                    get: function () {
                        if (this.delCidOld == "" || !this.CidList) {
                            return [];
                        }
                        let list = [];
                        let str = "," + this.delCidOld + ",";
                        for (let a = 0; a < this.CidList.length; a++) {
                            if (str.indexOf(`,${this.CidList[a].PID}-${this.CidList[a].CID},`) >= 0) {
                                list.push(this.CidList[a]);
                            }
                        }
                        return list
                    }
                },
                //单位信息
                UnitData: function () {
                    return this.UnitList[this.UnitIndex];
                }
            },
            methods: {
                submissions: function () {

                    this.$http({
                        url: "/energyManage/EMSetting/DeleteSupervisor",
                        method: "post",
                        body: { parent_id: data.parent_id, child_id: data.child_id, unit_id: this.UnitData.UnitID, }
                    }).then(function (res) {

                    })

                    console.log(this.node)
                },
                //添加节点
                append(data) {
                    const newChild = { ID: -1, name: '新建节点', Children: [], parent_id:data.child_id};
                    if (!data.Children) {
                        this.$set(data, 'Children', []);
                    }
                    data.Children.push(newChild);
                },
                //删除节点
                remove(node, data) {
                    console.log(data)
                    if (data.ID == -1) {
                        console.log(123)
                        const parent = node.parent;
                        const Children = parent.data.Children || parent.data;
                        const index = Children.findIndex(d => d.ID === data.ID);

                        Children.splice(index, 1);

                        this.$message({
                            showClose: true,
                            message: `${data.name}   删除成功`,
                            type: 'success'
                        });
                    }

                    this.$http({
                        url: "/energyManage/EMSetting/DeleteSupervisor",
                        method: "post",
                        body: { parent_id: data.parent_id, child_id: data.child_id, unit_id: this.UnitData.UnitID, }
                    }).then(function (res) {

                    })
                },

                //cid模态框点击确定
                ModalBoxClickOk: function (e) {
                    let cids = vm.$refs.cidtree.getCheckedNodes(true, false);
                    let str = "";
                    for (let a = 0; a < cids.length; a++) {
                        str += `${cids[a].PID}-${cids[a].CID},`
                    }
                    str = str.substr(0, str.length - 1);
                    if (this.cidtype > 0) {
                        this.addCidOld = str;
                        this.addecho = this.$refs.cidtree.getCheckedKeys();
                    } else {
                        this.delCidOld = str;
                        this.delecho = this.$refs.cidtree.getCheckedKeys();
                    }
                    this.DialogCid = false;
                },
                //筛选CID树
                filterCidNode(value, data) {
                    if (!value) return true;
                    return data.name.indexOf(value) !== -1;
                },

                //cid模态框关闭时
                closedDialog: function () {
                    this.$refs.cidtree.setCheckedKeys([]);
                },
                //cid模态框打开之后
                openedDialog: function () {
                    let str, arr;
                    if (this.cidtype > 0) {
                        arr = this.addCidOld;
                    } else {
                        arr = this.delCidOld;
                    }
                    if (arr.length == 0) {
                        return;
                    }
                    if (this.$refs.cidtree != undefined) {
                        this.$refs.cidtree.setCheckedKeys(arr.split(','));
                    }
                },

                //站室表格
                showTab: function () {
                    this.Dialogtab = true;
                    this.griData = [];

                    for (let a = 0; a < this.leavesNode.length; a++) {
                        var obj = {};
                        obj.nodeID = this.leavesNode[a].ID;
                        obj.nodeName = this.leavesNode[a].name;
                        obj.binded = this.leavesNode[a].addCid.replace(/,/g, " ");
                        obj.bindedNum = this.leavesNode[a].addCid.split(',').length;
                        let str = "," + this.leavesNode[a].addCid + ",";
                        let array = [];
                        for (let b = 0; b < this.CidBindMany.length; b++) {
                            if (str.indexOf(',' + this.CidBindMany[b]+',') >= 0) {
                                array.push(this.CidBindMany[b])
                            }
                        }
                        obj.bindss = array.join(" ");
                        if (obj.bindss != "") {
                            this.griData.unshift(obj)
                        } else {
                            this.griData.push(obj)
                        }
                    }

                    let obj1 = {};
                    obj1.nodeID = 0;
                    obj1.nodeName = "未绑定";
                    let str1 = [];
                    for (let a = 0; a < this.UnBind.length; a++) {
                        str1.push(`${this.UnBind[a].PID}-${this.UnBind[a].CID}`)
                    }
                    obj1.binded = str1.join(" ");
                    obj1.bindedNum = this.UnBind.length;
                    this.griData.unshift(obj1)
                },
                //关闭表格
                closeTab: function () {
                    this.Dialogtab = false
                },
                //还原
                RevertToCid: function (type) {
                    let str = "", str1 = "";
                    if (type > 0) {
                        str = "addCidOld";
                        str1 = "addCid";
                    } else {
                        str = "delCidOld";
                        str1 = "delCid";
                    }
                    this[str] = this.node[str1];

                },
                //关闭cid标签
                TagHandleClose(pid, cid, type) {
                    let str;
                    if (type > 0) {
                        str = "addCidOld";
                    } else {
                        str = "delCidOld";
                    }
                    let arr = this[str].split(',');
                    for (let a = 0; a < arr.length; a++) {
                        if (arr[a] == pid + "-" + cid) {
                            arr.splice(a, 1);
                            break;
                        }
                    }
                    this[str] = arr.join(',');
                },
                //继承子项
                InheritCid: function (type) {
                    let str = "", str1 = "";
                    if (type > 0) {
                        str = "addCidOld";
                        str1 = "addCid";
                    } else {
                        str = "delCidOld";
                        str1 = "delCid";
                    }
                    var cid = this[str] + ",";
                    let list = [];
                    this.traverseTree(list, [this.node]);

                    for (let a = 0; a < list.length; a++) {
                        cid += list[a][str1] + ",";
                    }
                    cid = cid.substr(0, cid.length - 1).split(',');
                    cid = this.unique5(cid).join(',');
                    this[str] = cid;
                },
                //数组去重
                unique5: function (array) {
                    array.sort();
                    var temp = [array[0]];
                    for (var i = 1; i < array.length; i++) {
                        if (array[i] !== temp[temp.length - 1]) {
                            temp.push(array[i]);
                        }
                    }
                    return temp;
                },
                //递归树
                traverseTree: function (list, Children) {
                    if (Children.length != 0) {
                        for (let a = 0; a < Children.length; a++) {
                            if (Children[a].Children.length != 0) {
                                this.traverseTree(list, Children[a].Children);
                            } else {
                                list.push(Children[a]);
                            }
                        }
                    }
                },
                //点击加号 添加电表
                ClickAddCidTagBtn: function (type) {
                    this.cidtype = type;
                    this.DialogCid = true;
                },
                //点击能源树节点
                TreeNodeClick: function (node) {
                    this.node = node;
                    this.addCidOld = node.addCid || "";
                    this.delCidOld = node.delCid || "";
                },
                //加载能源树
                GetEnergyTree: function () {
                    this.$http({
                        url: "/energyManage/EMSetting/GetEnergyTree",
                        method: "POST",
                        body: {
                            UnitID: parseInt(this.UnitData.UnitID),
                            ItemType: parseInt(this.treeType),
                            UnitName: this.UnitData.UnitName,
                        }
                    }).then(function (res) {
                        if (res.data.length > 0) {
                            this.tree.energy = res.data;
                            this.node = res.data[0];
                        } else {
                            this.tree.energy = [];
                            for (var i in this.node) {
                                this.node[i] = null;
                            }
                        }
                        this.addCidOld = this.node.addCid || "";
                        this.delCidOld = this.node.delCid || "";
                        setTimeout(function () {
                            vm.$refs.energy.setCurrentKey(vm.node.ID);
                        })
                    })
                },
                //加载CID原始数据
                GetCidData: function (data) {
                    if (localStorage.getItem("data" + this.UnitData.UnitID)) {
                        this.CidList = JSON.parse(localStorage.getItem("data" + this.UnitData.UnitID));
                        return;
                    }
                    this.$http({
                        url: "/energyManage/EMSetting/GetCidData",
                        method: "POST",
                        body: this.UnitData
                    }).then(function (res) {
                        this.CidList = res.data;
                        localStorage.setItem("data" + this.UnitData.UnitID, JSON.stringify(res.data));
                    })
                },
                //加载CID树
                GetCidTree: function () {
                    if (localStorage.getItem("tree" + this.UnitData.UnitID)) {
                        this.tree.cid = JSON.parse(localStorage.getItem("tree" + this.UnitData.UnitID));
                        return;
                    }
                    this.$http({
                        url: "/energyManage/EMSetting/GetCidTree",
                        method: "POST",
                        body: this.UnitData
                    }).then(function (res) {
                        this.tree.cid = res.data;
                        localStorage.setItem("tree" + this.UnitData.UnitID, JSON.stringify(res.data))
                    })
                },
                //加载单位列表
                GetUnitList: function () {
                    let that = this;
                    this.$http({
                        url: "/energyManage/EMSetting/GetUnitList",
                        method: "post",
                        body: {}
                    }).then(function (res) {
                        this.UnitList = res.data;
                        this.info();
                    })
                },
                //初始化
                info: function () {
                    this.GetCidTree();
                    this.GetEnergyTree();
                    this.GetCidData();
                }
            },
            watch: {
                filterText(val) {
                    this.$refs.cidtree.filter(val)
                }
            },
            created: function () {
                this.GetUnitList()
            },
            beforeMount: function () {
            },
            mounted: function () {

            },
            update: function () {
                this.info();





            }
        })
    </script>
</body>

</html>
<!DOCTYPE html>

<html>

<head>
    <meta name="viewport" content="width=device-width" />
    <title>分项用电</title>


    <script src="~/Content/js/vue.min.js"></script>
    <link rel="stylesheet" href="~/Content/ele/ele.css">
    <script src="~/Content/ele/ele.js"></script>
    <script src="~/Content/js/vue-resource.min.js"></script>


    <script type="text/javascript" src="~/Content/js/echarts.min.js"></script>
    <style>
        html,
        body {
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
        }

        #container {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        * {
            box-sizing: border-box
        }

        .body {
            display: flex;
            background: #fff;
        }

        .body,
        .main {
            flex-grow: 1;
        }

        .aside,
        .foot {
            margin: 10px;
            border-radius: 4px;
            background-color: #F8F8F8;
            overflow: hidden;
            box-shadow: 0 2px 12px 0 rgba(0,0,0,.1);
            color: #4C4C4C;
            padding: 20px;
        }

        div {
            overflow: hidden;
        }

        .list {
            display: flex;
            width: 100%;
            height: 100%;
        }

        .content {
            display: flex;
            flex-direction: column;
            margin: 10px;
            border-radius: 4px;
            background-color: #F8F8F8;
            overflow: hidden;
            box-shadow: 0 2px 12px 0 rgba(0,0,0,.1);
            color: #4C4C4C;
            padding: 20px;
        }

            .content .title {
                padding: 18px 20px;
                border-bottom: 1px solid #ebeef5;
                box-sizing: border-box;
            }

        p {
            margin: 0;
            padding: 0;
        }

        .content .node {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            padding: 0 15px;
        }

        .content .node1 {
            flex-grow: 1;
            display: flex;
            justify-content: space-around;
            padding: 0 15px;
        }

        .content .node2 {
            flex-grow: 1;
            display: flex;
            justify-content: space-between;
            padding: 0 15px;
        }


        .Children {
            flex-grow: 1;
        }

        .img {
            height: 100%;
            width: 100%;
        }

        .f2 {
            display: flex;
            justify-content: center;
            flex-direction: column;
            align-items: center;
            flex-grow: 1;
        }

            .f2 > * {
                margin: 8px 0;
            }


        .f3 {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

            .f3 > node2 {
                display: inline-block;
            }


        #pieChart, #barChart {
            height: 100%;
            overflow: hidden;
        }


        .el-button.el-button--default {
            background: #50bda0;
            color: #fff;
        }
    </style>

</head>

<body>
    <div id="container">

        <div class="body">
            <div class="main" id="main">
                <div :style="{'height':style.body.height*.75+'px','width':'100%'}">

                    <div class="list" v-for="itme in list">
                        <div class="content" :style="{'width':style.main.width/floor+'px','font-size':'14px'}">
                            <div>
                              
                                <el-date-picker :style="{'width':'143px'}" type="date"
                                                v-model="time"
                                                v-on:change="changeSelect"
                                                :focus="true"
                                                :clearable="false">
                                </el-date-picker>

                            </div>
                            <div class="node">
                                <h2> {{itme.name}} </h2>
                                <div>
                                    <span :style="{'font-size':node.font*1.5+'px'}">{{itme.UsePower.toFixed(2)}}</span> kW·h
                                    <p><el-button icon="el-icon-search" style="margin-top:20px" v-on:click="clickbutton(list[0])">查看详情</el-button></p>
                                </div>
                                <p :style="{'height':node.img+'px'}">
                                    <img :src="'../../../Content/images/tree/'+itme.icon" class="img" />
                                </p>
                            </div>
                        </div>
                        <div class="Children">
                            <tree-menu :list="itme.Children" :floor="floor" :width="node.width" :height="node.height" :name="itme.name"></tree-menu>
                        </div>
                    </div>
                </div>

            </div>
            <div class="aside" :style="{'width':style.body.width*.3+'px'}">
                <div class="barChart" id="pieChart"></div>
            </div>
        </div>
        <div class="foot" :style="{'height':style.body.height*.25+'px'}">
            <div class="pieChart" id="barChart"></div>
        </div>
    </div>


    <script type="text/x-template" id="tree-menu">
        <div style="width:100%;height:100%;flex-grow:1;display: flex;flex-direction: column;">
            <div class="list" v-for="itme in node" :style="{'height':height/list.length*node.length+'px'}" v-if="node.length!=0">
                <div class="content" :style="{'width':width+'px','font-size':'14px'}">
                    <div class="title">
                        {{itme.name}} 当日累计
                    </div>
                    <div class="node1">
                        <div class="f2">
                            <img :src="'../../../Content/images/tree/'+itme.icon" :style="{'height':height/list.length*.2+'px','width':height/list.length*.2+'px'}" />
                            <span> {{itme.name}}</span>
                        </div>

                        <div class="f2">
                            <span> 当日累计</span>
                            <p> <span :style="{'font-size':font*1.2+'px'}">{{itme.UsePower.toFixed(2)}}</span><span> kW·h</span></p>
                            <el-button icon="el-icon-search" v-on:click="clickbutton(itme)">查看详情</el-button>
                        </div>

                    </div>
                </div>
                <div class="Children">
                    <tree-menu :list="itme.Children" :floor="floor" :width="width" :height="height/list.length" :name="itme.name"></tree-menu>
                </div>
            </div>


            <div class="list" :style="{'height':height/list.length*leaves.length+'px'}" v-if="leaves.length!=0">
                <div class="content" :style="{'width':width+'px','font-size':'14px'}">
                    <div class="title">
                        {{name}} 当日累计
                    </div>

                    <div class="ndoe2" style="height:100%;flex-flow:1;display:flex;flex-direction:column;justify-content:space-around;">
                        <el-row :gutter="20" v-for="itme in leaves">
                            <el-col :span="6"> <img :src="'../../../Content/images/tree/'+itme.icon" :style="{'height':'25px','width':'25px'}" /></el-col>
                            <el-col :span="6">  <span> {{itme.name}}</span></el-col>
                            <el-col :span="6"><span :style="{'font-size':font*1.2}">{{itme.UsePower.toFixed(2)}}</span><span>kW·h</span></el-col>
                            <el-col :span="6"><el-button icon="el-icon-search" v-on:click="clickbutton(itme)" size="mini"> </el-button></el-col>
                        </el-row>
                    </div>

                </div>
                <div class="Children"></div>
            </div>



        </div>
    </script>
    <script>

        Vue.component('treeMenu', {
            template: '#tree-menu',
            props: ["list", "floor", "width", "height",'name'],
            computed: {
                //全部节点
                font: function () {
                    let font = this.height *.02;
                    font = font >= 12 ? font : 12;
                    return font
                },
            },
            data: function () {
                return {
                    leaves: [],
                    node: [],
                }
            },
            methods: {
                clickbutton: function (d) {
                    vm.getElectrMonth(d);
                }
            },
            created: function () {
                for (let a = 0; a < this.list.length; a++) {
                    if (this.list[a].Children.length == 0) {
                        this.leaves.push(this.list[a]);
                    } else if (this.list[a]) {
                        this.node.push(this.list[a])
                    }
                }
            }
        })



        let vm = new Vue({
            el: "#container",
            data: {
                UnitData: JSON.parse(window.localStorage.getItem("UnitData")),
                list: [],
                floor: 1,
                time:new Date(),
                style: {
                    body: {
                        width: 0,
                        height: 0,
                    },
                    main: {
                        width: 0,
                        height: 0,
                    },
                },
                node: {
                    width:0,
                    height: 0,
                    font: '0px',
                    titile: '0px',
                    img: '0px',
                }
            },
            methods: {
                clickbutton: function (d) {
                    vm.getElectrMonth(d);
                },
                changeSelect:function(val){
                   this.GetTreePower();
                },
                //获取树
                GetTreePower: function () {


             const loading = this.$loading({
                  lock: true,
                  text: 'Loading',
                  spinner: 'el-icon-loading',
                  background: 'rgba(0, 0, 0, 0.7)'
                });
                    if (!this.UnitData.enUID || !this.UnitData.enName) {
                        return
                    }
                    this.$http({
                        url: "/energyManage/EMSetting/GetEnergyTreePower",
                        method: "POST",
                        body: {
                            time:this.time,
                            UnitID: this.UnitData.enUID,
                            ItemType: 1,
                            UnitName: this.UnitData.enName
                        }
                    }).then(function (res) {
                        this.list = res.data;
                        this.floor = this.getMaxFloor(this.list);
                        this.style.body.width = document.body.offsetWidth;
                        this.style.body.height = document.body.offsetHeight;

                        this.style.main.width = this.style.body.width * .7;
                        this.style.main.height = this.style.body.height * .75;


                        this.node.width = this.style.body.width / this.floor;
                        this.node.height = this.style.body.height / this.list.length;


                        this.node.font = this.style.main.height * .04;
                        this.node.titile = this.style.main.height * .09;
                        this.node.img = this.style.main.height * .4;


                        this.getElectrMonth(res.data[0]);
                        loading.close();
                        //width/floor
                    })    
                     .catch(function (e) {
                        loading.close();
                            this.$notify({
                              title: '错误提示',
                              message: '该站室没有配置分项树信息',
                              duration: 0
                            });
                    })
                },
                //获取层数
                getMaxFloor: function (treeData) {
                    let floor = 0
                    let v = this
                    let max = 0
                    function each(data, floor) {
                        data.forEach(e => {
                            e.floor = floor
                            if (floor > max) {
                                max = floor
                            }
                            e.Children.floor = floor;

                            if (e.Children.length > 0) {
                                each(e.Children, floor + 1)
                            }
                        })
                    }
                    each(treeData, 1)
                    return max
                },
                //年月日  格式化
                formatDate: function (val) {

                    if (val != null) {
                        var date = new Date(parseInt(val.replace("/Date(", "").replace(")/", ""), 10));
                        //月份为0-11，所以+1，月份小于10时补个0
                        var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
                        var currentDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
                        return date.getFullYear() + "-" + month + "-" + currentDate;
                    }
                    return "";
                },
                //获取图表数据
                getElectrMonth: function(d){
                    this.$http({
                        url: "/energyManage/EMSetting/GetTreePowerMonth",
                        method: "POST",
                        body: {
                            //power:12
                            addCid: d.addCid,
                            delCid: d.delCid,
                            time: this.time
                        }
                    }).then(function (res) {

                        this.createBarChart(res.data, d.name,d.UsePower);
                        this.createPieChart(d.Children,d.name,d.UsePower);
                    })
                },
                createPieChart: function (data,name,count) {
                    var subtext = "";
                    var series = [];
                    var titleTop = 0;
                    var allPower = 0;
                    var legend = [];

                    for (var i in data) {
                        if (!data[i].UsePower) {
                            continue;
                        }
                        legend.push(data[i].name)
                        allPower += data[i].UsePower;
                        series.push({
                            name: data[i].name,
                            value: data[i].UsePower.toFixed(2)
                        })
                    }
                    if (data.length == 0) {
                        subtext = "暂无数据"
                        titleTop = '40%'
                    }
                    var pieChart = echarts.init(document.getElementById('pieChart'));
                    var option = {
                        title: {
                            //text: `${new Date().getMonth()+1}月${new Date().getDate()}日—分项用电`,
                            text: `${name} - 当日分项用电(${this.time.getMonth() + 1}月${this.time.getDate()}日)`,
                            subtext: subtext,
                            left: 'center',
                            textStyle: {
                                color: '#757575',
                                fontWeight: 'normal',
                                fontSize: 14,
                            },
                            top: titleTop
                        },
                        tooltip: {
                            trigger: 'item',
                            formatter: "{c}" + "  kW·h"
                        },
                        series: [{
                            type: 'pie',
                            radius: ['50%', '75%'],
                            center: ['50%', '50%'],
                            avoidLabelOverlap: false,
                            hoverAnimation: true,
                            label: {
                                normal: {
                                    show: true,
                                    position: 'center',
                                    formatter: [
                                        '{b|\n' + allPower.toFixed(2) + '\nkW·h}',
                                    ].join('\n'),
                                    rich: {
                                        b: {
                                            color: '#525252',
                                            lineHeight: 30,
                                            fontSize: 20,
                                        }
                                    },
                                },
                            },
                            data: series,
                            itemStyle: {
                                emphasis: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            },
                        }],
                        legend: {
                            type: 'scroll',
                            orient: 'horizontal',
                            right: 0,
                            bottom: 0,
                            data: legend,
                        },
                    };
                    pieChart.clear();
                    pieChart.setOption(option);
                    window.addEventListener("resize", () => {
                        pieChart.resize();
                    });
                },
                createBarChart: function (data,name,count) {
                    var xData = [];
                    var yData = [];
            
     
                    console.log(count)

                    for (var i in data) {
                        var str = this.formatDate(data[i].RecordTime);

               //count
                        if(str.substr(str.length - 2, 2) == this.time.getDate()){
                                yData.push(count)
        
                        }else{
                                yData.push(data[i].UsePower.toFixed(2))
                        }
                        xData.push(str.substr(str.length - 2, 2));
                    }
                    var barChart = echarts.init(document.getElementById('barChart'));
                    var option = {
                        title: {
                            text: `${name} - ${this.time.getMonth() + 1}月总计用电：${Math.floor(count * 100) / 100} kW·h`,
                            left: 'center',
                            textStyle: {
                                color: '#757575',
                                fontWeight: 'normal',
                                fontSize: 16,
                            },
                            top: 0
                        },
                        color: ['#57b9a3'],
                        tooltip: {
                            trigger: 'axis',
                            formatter: "{a}: <br/>{b}：{c}",
                            axisPointer: { // 坐标轴指示器，坐标轴触发有效
                                type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
                            },
                            position: ['50%', '50%']
                        },

                        grid: {
                            top: '18%',
                            bottom: 0,
                            containLabel: true
                        },
                        xAxis: [{
                            type: 'category',
                            data: xData,
                            axisLine: {
                                lineStyle: {
                                    color: '#57b9a3', //x轴线颜色
                                    width: '0.7',

                                },
                            },
                            axisTick: {
                                show: false,
                                alignWithLabel: true
                            },
                            axisLabel: { //调整y轴的lable
                                textStyle: {
                                    fontSize: 16, // 让字体变大
                                    color: '#9f9d9d'
                                }
                            },
                        }],
                        yAxis: [{
                            type: 'value',
                            name: 'kW·h',
                            axisLine: {
                                lineStyle: {
                                    color: '#57b9a3', //x轴线颜色
                                    width: '1'
                                },
                            },
                            axisTick: {
                                show: false,
                                alignWithLabel: true
                            },
                            axisLabel: { //调整y轴的lable
                                textStyle: {
                                    fontSize: 14, // 让字体变大
                                    color: '#9f9d9d'
                                }
                            },
                            splitLine: {
                                show: true,
                                lineStyle: {
                                    color: '#ededed'
                                }
                            },
                        }],
                        series: [{
                            name: '总用电量',
                            type: 'bar',
                            barWidth: '50%',
                            data: yData
                        }],
                        dataZoom: [{
                            type: 'inside'
                        }]
                    };
                    barChart.clear()
                    barChart.setOption(option)
                    window.addEventListener("resize", () => {
                        barChart.resize();
                    });

                }

            },
            created: function () {
                this.GetTreePower();
            },
            mounted() {

            }
        });
    </script>
</body>

</html>
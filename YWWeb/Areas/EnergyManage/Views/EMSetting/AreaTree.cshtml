@{ Layout = null; }
<!DOCTYPE html>

<html>

<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>

    

    <script type="text/javascript" src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    @*<script type="text/javascript" src="~/Content/js/jquery-1.14.2.min.js"></script>*@
    <script type="text/javascript" src="~/Content/js/jquery.cookie.js"></script>


    <link href="~/Content/d3/css/style.css" rel="stylesheet" />
    <script src="~/Content/d3/js/d3.js"></script>
    <script src="~/Content/d3/js/d3.layout.js"></script>





    <style scoped>
        #body {
            background: #efefef;
            position: absolute;
            width: 100%;
            height: 100%;
            overflow: hidden;
            display: flex;
            flex-direction: row;
            justify-content: space-around;
            background-color:#ddd;
        }


        rect {
            fill-opacity: .9;
        }

        text {
            font-size: 16px;
        }
        .electricity{
            color:#ff6a00;
        }
    </style>
</head>
<body>
    <div id="body"></div>


    <script>
        var w = 1140,
            h = 600,
            x = d3.scale.linear().range([0, w]),
            y = d3.scale.linear().range([0, h]);

        var vis = d3.select("#body").append("div")
            .attr("class", "chart")
            .style("width", w + "px")
            .style("height", h + "px")
            .append("svg:svg")
            .attr("width", w)
            .attr("height", h);

        var partition = d3.layout.partition()
            .value(function (d) {
                return d.size;
            });
        var data = JSON.parse(window.localStorage.getItem("UnitData"));


        $.ajax({
            type: "post",
            url: "/energyManage/EMSetting/GetTreeData",
            data: {
                unitID: data.UnitID,
                item_type: 1,
                unitName: data.UnitName
            },
            success: function (res) {
                if (!res) {
                    return;
                }
                res = res.replace(/{/g, `{"size":1,`);
                var root = JSON.parse(res);
                var g = vis.selectAll("g")
                    .data(partition.nodes(root))
                    .enter().append("svg:g")
                    .attr("transform", function (d) {
                        return "translate(" + x(d.y) + "," + y(d.x) + ")";
                    })
                    .on("click", click);

                var kx = w / root.dx,
                    ky = h / 1;

                g.append("svg:rect")
                    .attr("width", root.dy * kx)
                    .attr("height", function (d) {
                        return d.dx * ky;
                    })
                    .attr("class", function (d) {
                        return d.children.length ? "parent" : "child";
                    });

                var text = g.append("svg:text")
                    .attr("dy", ".35em")
                    .style("opacity", function (d) {
                        return d.dx * ky > 32 ? 1 : 0;
                    })
                    .attr("x", 0)
                    .attr("y", 0)
                    .attr("transform", transform)
                    .text(function (d) {
                        return d.name;
                    })


                text.selectAll("tspan")
                    .data(function (d) {
                        return d.electricity ? ["实际用电：" + d.name] : ["总用电量：" + 123123]
                    })
                    .enter()
                    .append("svg:tspan")
                    .attr("x", text.attr("x"))
                    .attr("dy", "1em")
                    .attr('fill','#333')
                    .text(function (d) {
                        return d;
                    });

                d3.select(window)
                    .on("click", function () {
                        click(root);
                    })



                function click(d) {
                    if (!d.children) {
                        return;
                    }
                    kx = (d.y ? w - 40 : w) / (1 - d.y);
                    ky = h / d.dx;
                    x.domain([d.y, 1]).range([d.y ? 40 : 0, w]);
                    y.domain([d.x, d.x + d.dx]);

                    var t = g.transition()
                        .duration(d3.event.altKey ? 7500 : 750)
                        .attr("transform", function (d) {
                            return "translate(" + x(d.y) + "," + y(d.x)  +")";
                        });

                    t.select("rect")
                        .attr("width", d.dy * kx)
                        .attr("height", function (d) {
                            return d.dx * ky;
                        });


                    t.select("text")
                        .attr("transform", transform)
                        .style("opacity", function (d) {
                            return d.dx * ky > 32 ? 1 : 0;
                        });
                    d3.event.stopPropagation();
                }
                function transform(d) {
                    return "translate(8," + (d.dx * ky / 2 - 8) + ")";
                }
            }
        })
                //x最小 像素大小
                //x最大 w/层数-文字个数*像素大小

                //y最小 0+像素*2
                //y最大 d.dx*ky-2*像素大小
    </script>
</body>
</html>